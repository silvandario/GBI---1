#BlueJ class context
comment0.target=Roboter
comment0.text=\n\ Beschreiben\ Sie\ hier\ die\ Klasse\ Roboter.\n\ \n\ @author\ Silvan\n\ @version\ 1\n\ \n\ In\ \u00DCbungslektion\ bei\ Alex\:\ Montage_roboter,\ etc.\ ->\ nur\ eine\ Variante\ ist\ notwendig,\ einfach\ zum\ zeigen,\ dass\ es\ funktioniert\n
comment1.params=name
comment1.target=Roboter(java.lang.String)
comment1.text=\n\ Konstruktor\n\ \n\ @param\ name\ des\ Roboters\n
comment2.params=
comment2.target=void\ run()
comment2.text=\n\ Beschreibung\n
comment3.params=zeit
comment3.target=void\ lasseThreadSchlafen(int)
comment3.text=\n\ L\u00E4sst\ Thread\ schlafen,\ um\ die\ Bearbeitungszeit\ zu\ simulieren*\ \n\ @param\ \ zeit\ \ Dauer,\ wie\ lange\ Thread\ schl\u00E4ft\:\ Der\ Thread\ wird\ f\u00FCr\ 10\ Minuten\ (600.000\ Millisekunden)\ bei\ Standardt\u00FCren\ oder\ \n\ \ 30\ Minuten\ (1.800.000\ Millisekunden)\ bei\ Premiumt\u00FCren\ schlafen\ gelegt\n
comment4.params=produkt
comment4.target=void\ produziereProdukt(Produkt)
comment4.text=\n\ Die\ Produktion\ eines\ Produkts\ wird\ simuliert\ indem\ man\ den\ Thread\ schlafen\ legt\n
comment5.params=
comment5.target=java.lang.String\ gibName()
comment5.text=\n\ Gibt\ den\ Namen\ des\ Roboters\n\ \n\ @return\ Name\ vom\ Roboter\n
comment6.params=produkt
comment6.target=void\ fuegeProduktHinzu(Produkt)
comment6.text=\n\ Roboter\ erh\u00E4lt\ neues\ PRodukt\ \n\ \n
numComments=7
