#BlueJ class context
comment0.target=Roboter
comment0.text=\n\ Klasse\ Roboter\ -\ Simuliert\ die\ Bearbeitung\ von\ Produkten\ durch\ Roboter.\n\ \n\ @author\ Silvan\n\ @version\ 1.2\n
comment1.params=name
comment1.target=Roboter(java.lang.String)
comment1.text=\n\ Konstruktor\n\ \n\ @param\ name\ Name\ des\ Roboters\n
comment2.params=
comment2.target=void\ run()
comment2.text=\n\ Hauptmethode\ des\ Threads\:\ Bearbeitet\ Produkte\ in\ der\ Warteschlange.\n
comment3.params=
comment3.target=void\ beenden()
comment3.text=\n\ Beendet\ den\ Thread.\n
comment4.params=produkt
comment4.target=void\ produziereProdukt(Produkt)
comment4.text=\n\ Simuliert\ die\ Produktionszeit\ durch\ Thread-Schlaf.\n\ \n\ @param\ produkt\ Das\ Produkt,\ das\ bearbeitet\ wird\n
comment5.params=produkt
comment5.target=void\ fuegeProduktHinzu(Produkt)
comment5.text=\n\ F\u00FCgt\ ein\ neues\ Produkt\ zur\ Warteschlange\ hinzu.\n\ \n\ @param\ produkt\ Das\ Produkt,\ das\ hinzugef\u00FCgt\ werden\ soll\n
comment6.params=zeit
comment6.target=void\ setzteProduktionsZeit(int)
comment6.text=\n\ Setzt\ die\ Produktionszeit.\n\ \n\ @param\ zeit\ Neue\ Produktionszeit\ in\ Millisekunden\n
comment7.params=
comment7.target=java.lang.String\ gibName()
comment7.text=\n\ Gibt\ den\ Namen\ des\ Roboters\ zur\u00FCck.\n\ \n\ @return\ Name\ des\ Roboters\n
comment8.params=zeit
comment8.target=void\ lasseThreadSchlafen(int)
comment8.text=\n\ L\u00E4sst\ den\ Thread\ f\u00FCr\ eine\ bestimmte\ Zeit\ schlafen.\n\ \n\ @param\ zeit\ Zeit\ in\ Millisekunden,\ die\ der\ Thread\ schlafen\ soll\n
comment9.params=output
comment9.target=void\ synchronisiertesPrintln(java.lang.String)
comment9.text=\n\ Synchronized\ Print-Methode\ zur\ Vermeidung\ von\ Konsolen-Kollisionen.\n\ \n\ @param\ output\ Text,\ der\ ausgegeben\ werden\ soll\n
numComments=10
